module CompoundTenTetrahedra.Data
  where
import           Data.List                    (nub)
import           Data.List.Split              (chunksOf)
import           Data.Tuple.Extra             (both)
import           Graphics.Rendering.OpenGL.GL (GLfloat, Vertex3 (..))

vertices :: [Vertex3 GLfloat]
vertices =
  map toVertex3 [ [0.5773500, 0.5773500, 0.5773500],
                  [0.5773500, 0.5773500, -0.577350],
                  [0.5773500, -0.577350, 0.5773500],
                  [-0.577350, -0.577350, 0.5773500],
                  [-0.577350, 0.5773500, -0.577350],
                  [-0.577350, 0.5773500, 0.5773500],
                  [0.0000000, 0.3568220, -0.934173], -- 1/2/sqrt(3)/cos(Pi/5), cos(pi/5)/sin(pi/3)
                  [0.0000000, -0.356822, -0.934173],
                  [0.0000000, -0.356822, 0.9341730],
                  [0.9341730, 0.0000000, -0.356822],
                  [-0.934173, 0.0000000, -0.356822],
                  [-0.934173, 0.0000000, 0.3568220],
                  [0.3568220, 0.9341730, 0.0000000],
                  [0.3568220, -0.934173, 0.0000000],
                  [-0.356822, -0.934173, 0.0000000],
                  [-0.356822, 0.9341730, 0.0000000],
                  [0.0000000, 0.3568220, 0.9341730],
                  [0.5773500, -0.577350, -0.577350],
                  [0.9341730, 0.0000000, 0.3568220],
                  [-0.577350, -0.577350, -0.577350]
                ]
  where
    toVertex3 x = Vertex3 (x!!0) (x!!1) (x!!2)

tetrahedraIdxs :: [[[Int]]]
tetrahedraIdxs =
  chunksOf 4 [[ 1,13,16],
              [13,10,16],
              [13, 1,10],
              [ 1,16,10],
              [ 3, 0,17],
              [ 0, 4,17],
              [ 3,17, 4],
              [ 0, 3, 4],
              [14, 5,18],
              [ 5, 6,18],
              [ 6,14,18],
              [ 5,14, 6],
              [11,12, 2],
              [12, 7, 2],
              [12,11, 7],
              [ 2, 7,11],
              [ 9,15,19],
              [15, 8,19],
              [15, 9, 8],
              [ 8, 9,19],
              [ 8,12,17],
              [ 8,10,12],
              [10,17,12],
              [10, 8,17],
              [ 1, 2, 5],
              [ 1,19, 2],
              [19, 1, 5],
              [19, 5, 2],
              [18, 3,15],
              [18, 7, 3],
              [18,15, 7],
              [ 7,15, 3],
              [ 0,13,11],
              [ 0, 6,13],
              [ 6,11,13],
              [11, 6, 0],
              [ 4,14, 9],
              [ 4,16,14],
              [16, 9,14],
              [ 4, 9,16]
             ]

tetrahedra :: [[[Vertex3 GLfloat]]]
tetrahedra = map (map (\idxs -> [vertices !! i | i <- idxs])) tetrahedraIdxs

edgesIdxs :: [[(Int,Int)]]
edgesIdxs =
  chunksOf 6 [( 1,13),
              (13,16),
              (16, 1),
              (13,10),
              (10,16),
              ( 1,10),
              ( 3, 0),
              ( 0,17),
              (17, 3),
              ( 0, 4),
              ( 4,17),
              ( 4, 3),
              (14, 5),
              ( 5,18),
              (18,14),
              ( 5, 6),
              ( 6,18),
              ( 6,14),
              (11,12),
              (12, 2),
              ( 2,11),
              (12, 7),
              ( 7, 2),
              (11, 7),
              ( 9,15),
              (15,19),
              (19, 9),
              (15, 8),
              ( 8,19),
              ( 9, 8),
              ( 8,12),
              (12,17),
              (17, 8),
              ( 8,10),
              (10,12),
              (10,17),
              ( 1, 2),
              ( 2, 5),
              ( 5, 1),
              ( 1,19),
              (19, 2),
              ( 5,19),
              (18, 3),
              ( 3,15),
              (15,18),
              (18, 7),
              ( 7, 3),
              (15, 7),
              ( 0,13),
              (13,11),
              (11, 0),
              ( 0, 6),
              ( 6,13),
              ( 6,11),
              ( 4,14),
              (14, 9),
              ( 9, 4),
              ( 4,16),
              (16,14),
              (16, 9)
             ]

edges :: [[(Vertex3 GLfloat, Vertex3 GLfloat)]]
edges = map (map (both (vertices !!))) edgesIdxs

vertices' :: [[Vertex3 GLfloat]]
vertices' =
  map (nub . concatMap (\idxs -> [vertices !! i | i <- idxs])) tetrahedraIdxs
